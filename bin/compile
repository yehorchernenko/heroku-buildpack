#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

BIN_DIR="$(cd $(dirname $0); pwd)/P2PServer"
ROOT_DIR=$(dirname $BIN_DIR)

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

CLANG_VERSION=7.0.1

SWIFT_VERSION="5.7"
SWIFT_BUILD_CONFIGURATION="release"
SWIFT_BUILD_FLAGS=""

source "/etc/lsb-release"
source "$BIN_DIR/utils"

if [ -f "$BUILD_DIR/.swift-version" ]; then
  SWIFT_VERSION=`cat $BUILD_DIR/.swift-version | tr -d '[[:space:]]'`
  puts-step "Using Swift $SWIFT_VERSION (from .swift-version file)"
elif [ -f "$ENV_DIR/SWIFT_VERSION" ]; then
  SWIFT_VERSION=`cat $ENV_DIR/SWIFT_VERSION | tr -d '[[:space:]]'`
  puts-step "Using Swift $SWIFT_VERSION (from SWIFT_VERSION config)"
else
  puts-step "Using Swift $SWIFT_VERSION (default)"
fi

if [ -f "$ENV_DIR/SWIFT_BUILD_CONFIGURATION" ]; then
  SWIFT_BUILD_CONFIGURATION=`cat "$ENV_DIR/SWIFT_BUILD_CONFIGURATION"`
fi

if [ -f "$ENV_DIR/SWIFT_BUILD_FLAGS" ]; then
  SWIFT_BUILD_FLAGS=`cat "$ENV_DIR/SWIFT_BUILD_FLAGS"`
fi


mkdir -p "$CACHE_DIR/$STACK"

if [[ $SWIFT_VERSION = 5* ]]; then
  puts-step "Using built-in clang (Swift $SWIFT_VERSION)"
else
  source "$BIN_DIR/steps/clang"
fi

source "$BIN_DIR/steps/swiftenv"

cd $BUILD_DIR
source "$BIN_DIR/steps/hooks/pre_compile" "$BUILD_DIR" "$CACHE_DIR" "$ENV_DIR"
source "$BIN_DIR/steps/ssh"
source "$BIN_DIR/steps/swift-build"
source "$BIN_DIR/steps/hooks/post_compile" "$BUILD_DIR" "$CACHE_DIR" "$ENV_DIR"
if [[ -z "$RUN_TESTS" ]]; then
  source "$BIN_DIR/steps/hooks/pre_install" "$BUILD_DIR" "$CACHE_DIR" "$ENV_DIR"
  source "$BIN_DIR/steps/swift-install"
  source "$BIN_DIR/steps/hooks/post_install" "$BUILD_DIR" "$CACHE_DIR" "$ENV_DIR"
fi

# Setup application environment
mkdir -p $BUILD_DIR/.profile.d

set-env PATH '$HOME/.swift-bin:$PATH'
set-env LD_LIBRARY_PATH '$LD_LIBRARY_PATH:$HOME/.swift-lib'
